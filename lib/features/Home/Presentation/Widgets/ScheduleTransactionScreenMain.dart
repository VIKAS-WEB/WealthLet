import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:wealthlet/core/utils/Colorfields.dart';
import 'package:wealthlet/features/Home/Bloc/Scheduled_Bloc/ScheduledTransactionBloc.dart';
import 'package:wealthlet/features/Home/Bloc/Scheduled_Bloc/ScheduledTransactionEvent.dart';
import 'package:wealthlet/features/Home/Data/Models/ScheduledTransaction.dart';

class ScheduleTransactionScreen extends StatefulWidget {
  @override
  _ScheduleTransactionScreenState createState() => _ScheduleTransactionScreenState();
}

class _ScheduleTransactionScreenState extends State<ScheduleTransactionScreen> {
  final _formKey = GlobalKey<FormState>();
  double _amount = 0.0;
  String _recipient = '';
  DateTime _selectedDate = DateTime.now();
  String _type = 'Transfer';

  Future<void> _selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate,
      firstDate: DateTime.now(),
      lastDate: DateTime(2100),
      builder: (context, child) {
        return Theme(
          data: ThemeData.light().copyWith(
            colorScheme: ColorScheme.light(
              primary: ColorsField.buttonRed,
              onPrimary: Colors.white,
              surface: Colors.white,
              onSurface: Colors.black87,
            ),
            dialogTheme: DialogThemeData(
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
            ),
          ),
          child: child!,
        );
      },
    );
    if (picked != null && picked != _selectedDate) {
      setState(() {
        _selectedDate = picked;
      });
    }
  }

  void _scheduleTransaction() {
    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save();
      final transaction = ScheduledTransaction(
        id: '', // ID will be generated by Firestore
        amount: _amount,
        recipient: _recipient,
        date: _selectedDate,
        type: _type,
        status: 'Pending',
        createdAt: DateTime.now(),
      );
      context.read<ScheduledTransactionBloc>().add(AddScheduledTransaction(transaction));
      Navigator.pop(context);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Schedule Transaction'),
        backgroundColor: ColorsField.buttonRed,
        foregroundColor: Colors.white,
         flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [Color.fromARGB(255, 22, 22, 22), ColorsField.buttonRed],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
        ),

      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              SizedBox(height: 15,),
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Amount (â‚¹)',
                  border: OutlineInputBorder(),
                ),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter an amount';
                  }
                  if (double.tryParse(value) == null || double.parse(value) <= 0) {
                    return 'Please enter a valid amount';
                  }
                  return null;
                },
                onSaved: (value) {
                  _amount = double.parse(value!);
                },
              ),
              SizedBox(height: 16),
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Recipient',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a recipient';
                  }
                  return null;
                },
                onSaved: (value) {
                  _recipient = value!;
                },
              ),
              SizedBox(height: 16),
              DropdownButtonFormField<String>(
                decoration: InputDecoration(
                  labelText: 'Transaction Type',
                  border: OutlineInputBorder(),
                ),
                value: _type,
                items: ['Transfer', 'Bill Payment'].map((String type) {
                  return DropdownMenuItem<String>(
                    value: type,
                    child: Text(type),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _type = value!;
                  });
                },
              ),
              SizedBox(height: 16),
              ListTile(
                title: Text(
                  'Date: ${_selectedDate.toString().split(' ')[0]}',
                  style: TextStyle(fontSize: 16),
                ),
                trailing: Icon(Icons.calendar_today),
                onTap: () => _selectDate(context),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _scheduleTransaction,
                style: ElevatedButton.styleFrom(
                  backgroundColor: ColorsField.buttonRed,
                  foregroundColor: Colors.white,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                  padding: EdgeInsets.symmetric(vertical: 16, horizontal: 25),
                ),
                child: Text('Schedule', style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
              ),
            ],
          ),
        ),
      ),
    );
  }
}